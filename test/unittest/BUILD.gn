# Copyright (c) 2022-2023 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import("//build/test.gni")

module_output_path = "enterprise_device_management/services"

config("module_private_config") {
  visibility = [ ":*" ]
  include_dirs = [ "../" ]
}

config("edm_config") {
  visibility = [ ":*" ]
  include_dirs = [
    "../../services/edm/include",
    "../../services/edm/include/connection",
    "../../services/edm/include/database",
    "../../framework/extension/include",
  ]
}

ohos_static_library("edmservice_static") {
  testonly = true
  sources = [
    "../../services/edm/src/ability_manager_death_recipient.cpp",
    "../../services/edm/src/admin.cpp",
    "../../services/edm/src/admin_manager.cpp",
    "../../services/edm/src/admin_policies_storage_rdb.cpp",
    "../../services/edm/src/application_state_observer.cpp",
    "../../services/edm/src/connection/enterprise_admin_connection.cpp",
    "../../services/edm/src/connection/enterprise_admin_proxy.cpp",
    "../../services/edm/src/connection/enterprise_bundle_connection.cpp",
    "../../services/edm/src/connection/enterprise_conn_manager.cpp",
    "../../services/edm/src/database/edm_rdb_data_manager.cpp",
    "../../services/edm/src/database/edm_rdb_open_callback.cpp",
    "../../services/edm/src/device_policies_storage_rdb.cpp",
    "../../services/edm/src/enterprise_device_mgr_ability.cpp",
    "../../services/edm/src/enterprise_device_mgr_stub.cpp",
    "../../services/edm/src/permission_manager.cpp",
    "../../services/edm/src/plugin_manager.cpp",
    "../../services/edm/src/policy_manager.cpp",
    "../../services/edm/src/super_admin.cpp",
  ]

  public_configs = [
    ":edm_config",
    "../../common/config:coverage_flags",
  ]

  defines = []

  if (target_cpu == "arm64") {
    defines += [ "_ARM64_" ]
    print("defines _ARM64_")
  }

  external_deps = [
    "ability_base:want",
    "ability_runtime:ability_manager",
    "ability_runtime:app_manager",
    "access_token:libaccesstoken_sdk",
    "access_token:libtokenid_sdk",
    "bundle_framework:appexecfwk_base",
    "bundle_framework:appexecfwk_core",
    "c_utils:utils",
    "common_event_service:cesfwk_innerkits",
    "hilog:libhilog",
    "init:libbegetutil",
    "ipc:ipc_core",
    "os_account:os_account_innerkits",
    "relational_store:native_rdb",
    "safwk:system_ability_fwk",
    "samgr:samgr_proxy",
  ]

  deps = [
    "../../common/native:edm_commom",
    "../../interfaces/inner_api:edmservice_kits",
    "../../interfaces/inner_api/plugin_kits:plugin_kits",
    "//third_party/jsoncpp:jsoncpp",
  ]

  subsystem_name = "customization"
  part_name = "enterprise_device_management"
}

ohos_unittest("EdmServicesUnitTest") {
  module_out_path = module_output_path

  include_dirs = [
    "../../interfaces/inner_api/plugin_kits/include/utils",
    "./include",
    "./mock/include",
  ]

  sources = [
    "./mock/src/bundle_manager_mock.cpp",
    "./mock/src/edm_sys_manager_mock.cpp",
    "./src/admin_manager_test.cpp",
    "./src/edm_data_ability_utils_test.cpp",
    "./src/edm_permission_test.cpp",
    "./src/edm_sys_manager_test.cpp",
    "./src/ent_info_test.cpp",
    "./src/enterprise_admin_connection_test.cpp",
    "./src/enterprise_bundle_connection_test.cpp",
    "./src/enterprise_conn_manager_test.cpp",
    "./src/enterprise_device_mgr_ability_test.cpp",
    "./src/enterprise_device_mgr_proxy_test.cpp",
    "./src/iplugin_template_test.cpp",
    "./src/iplugin_test.cpp",
    "./src/permission_manager_test.cpp",
    "./src/plugin_manager_test.cpp",
    "./src/policy_manager_test.cpp",
    "./src/policy_serializer_test.cpp",
    "./src/utils.cpp",
    "./src/utils_test.cpp",
  ]

  configs = [
    ":module_private_config",
    "../../common/config:coverage_flags",
  ]

  deps = [
    ":edmservice_static",
    "../../common/native:edm_commom",
    "../../interfaces/inner_api:edmservice_kits",
    "../../interfaces/inner_api/plugin_kits:plugin_kits",
    "//third_party/googletest:gmock_main",
    "//third_party/googletest:gtest_main",
    "//third_party/jsoncpp:jsoncpp",
  ]

  external_deps = [
    "ability_base:want",
    "ability_runtime:ability_manager",
    "access_token:libaccesstoken_sdk",
    "access_token:libnativetoken",
    "access_token:libtoken_setproc",
    "c_utils:utils",
    "common_event_service:cesfwk_innerkits",
    "hilog:libhilog",
    "ipc:ipc_core",
    "safwk:system_ability_fwk",
    "samgr:samgr_proxy",
  ]

  subsystem_name = "customization"
  part_name = "enterprise_device_management"
}

group("unittest") {
  testonly = true
  deps = []

  deps += [
    # deps file
    ":EdmServicesUnitTest",
    "account_manager_proxy:unittest",
    "application_manager_proxy:unittest",
    "browser_proxy:unittest",
    "bundle_manager_proxy:unittest",
    "datetime_manager_proxy:unittest",
    "device_control_proxy:unittest",
    "device_info_proxy:unittest",
    "device_settings_proxy:unittest",
    "edm_plugin:unittest",
    "enterprise_device_mgr_ability:unittest",
    "enterprise_device_mgr_proxy:unittest",
    "network_manager_proxy:unittest",
    "restrictions_proxy:unittest",
    "wifi_manager_proxy:unittest",
  ]
}
