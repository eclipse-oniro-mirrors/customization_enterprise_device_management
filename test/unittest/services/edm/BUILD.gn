# Copyright (c) 2022-2024 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import("//build/test.gni")
import("../../../../common/config/common.gni")

module_output_path = "enterprise_device_management/enterprise_device_management"

config("module_private_config") {
  visibility = [ ":*" ]
  include_dirs = [ "../" ]
}

config("edm_config") {
  visibility = [ ":*" ]
  include_dirs = [
    "../../../../services/edm/include",
    "../../../../services/edm/include/connection",
    "../../../../services/edm/include/database",
    "../../../../services/edm/include/query_policy",
    "../../../../services/edm/include/strategy",
    "../../../../services/edm/include/watermark",
    "../../../../services/edm_plugin/include",
    "../../../../services/edm_plugin/include/utils",
    "../../../../framework/extension/include",
  ]
}

ohos_static_library("edmservice_static") {
  testonly = true
  sources = [
    "../../../../services/edm/src/admin.cpp",
    "../../../../services/edm/src/admin_container.cpp",
    "../../../../services/edm/src/admin_manager.cpp",
    "../../../../services/edm/src/admin_policies_storage_rdb.cpp",
    "../../../../services/edm/src/application_state_observer.cpp",
    "../../../../services/edm/src/connection/enterprise_account_connection.cpp",
    "../../../../services/edm/src/connection/enterprise_admin_connection.cpp",
    "../../../../services/edm/src/connection/enterprise_admin_proxy.cpp",
    "../../../../services/edm/src/connection/enterprise_bundle_connection.cpp",
    "../../../../services/edm/src/connection/enterprise_conn_manager.cpp",
    "../../../../services/edm/src/connection/enterprise_update_connection.cpp",
    "../../../../services/edm/src/database/edm_rdb_data_manager.cpp",
    "../../../../services/edm/src/database/edm_rdb_open_callback.cpp",
    "../../../../services/edm/src/device_policies_storage_rdb.cpp",
    "../../../../services/edm/src/enterprise_device_mgr_ability.cpp",
    "../../../../services/edm/src/enterprise_device_mgr_stub.cpp",
    "../../../../services/edm/src/permission_checker.cpp",
    "../../../../services/edm/src/permission_manager.cpp",
    "../../../../services/edm/src/plugin_manager.cpp",
    "../../../../services/edm/src/policy_manager.cpp",
    "../../../../services/edm/src/query_policy/allowed_install_bundles_query.cpp",
    "../../../../services/edm/src/query_policy/disable_backup_and_restore_query.cpp",
    "../../../../services/edm/src/query_policy/disallow_modify_apn_query.cpp",
    "../../../../services/edm/src/query_policy/disallow_modify_datetime_query.cpp",
    "../../../../services/edm/src/query_policy/disallowed_install_bundles_query.cpp",
    "../../../../services/edm/src/query_policy/disallowed_tethering_query.cpp",
    "../../../../services/edm/src/query_policy/disallowed_uninstall_bundles_query.cpp",
    "../../../../services/edm/src/query_policy/get_device_encryption_status_query.cpp",
    "../../../../services/edm/src/query_policy/get_display_version_query.cpp",
    "../../../../services/edm/src/query_policy/get_security_patch_tag_query.cpp",
    "../../../../services/edm/src/query_policy/inactive_user_freeze_query.cpp",
    "../../../../services/edm/src/query_policy/installed_bundle_info_list_query.cpp",
    "../../../../services/edm/src/query_policy/ipolicy_query.cpp",
    "../../../../services/edm/src/query_policy/ntp_server_query.cpp",
    "../../../../services/edm/src/query_policy/password_policy_query.cpp",
    "../../../../services/edm/src/query_policy/plugin_policy_reader.cpp",
    "../../../../services/edm/src/query_policy/snapshot_skip_query.cpp",
    "../../../../services/edm/src/strategy/enhance_execute_strategy.cpp",
    "../../../../services/edm/src/strategy/replace_execute_strategy.cpp",
    "../../../../services/edm/src/strategy/single_execute_strategy.cpp",
    "../../../../services/edm/src/user_policy_manager.cpp",
    "../../../../services/edm_plugin/src/utils/usb_policy_utils.cpp",
    "../../../../services/edm/src/query_policy/disallowed_sms_query.cpp",
    "../../../../services/edm/src/query_policy/disallowed_mms_query.cpp",
  ]

  public_configs = [
    ":edm_config",
    "../../../../common/config:coverage_flags",
  ]

  defines = []

  if (target_cpu == "arm64") {
    defines += [ "_ARM64_" ]
    print("defines _ARM64_")
  }

  if (target_cpu == "x86_64") {
    defines += [ "_X86_64_" ]
    print("defines _X86_64_")
  }

  if (wifi_edm_enable) {
    sources += [
      "../../../../services/edm/src/query_policy/allowed_wifi_list_query.cpp",
      "../../../../services/edm/src/query_policy/disallowed_wifi_list_query.cpp",
      "../../../../services/edm/src/query_policy/set_wifi_disabled_query.cpp",
    ]
  }

  if (drivers_interface_usb_edm_enable && storage_service_edm_enable &&
      usb_manager_edm_enable) {
    sources +=
        [ "../../../../services/edm/src/query_policy/usb_read_only_query.cpp" ]
  }

  if (location_edm_enable) {
    sources += [
      "../../../../services/edm/src/query_policy/location_policy_query.cpp",
    ]
  }

  if (useriam_edm_enable) {
    sources += [
      "../../../../services/edm/src/query_policy/fingerprint_auth_query.cpp",
    ]
  }

  if (ability_runtime_edm_enable) {
    sources += [ "../../../../services/edm/src/query_policy/disallowed_running_bundles_query.cpp" ]
  }

  if (bluetooth_edm_enable) {
    sources += [
      "../../../../services/edm/src/query_policy/allowed_bluetooth_devices_query.cpp",
      "../../../../services/edm/src/query_policy/disable_bluetooth_query.cpp",
      "../../../../services/edm/src/query_policy/disallowed_bluetooth_devices_query.cpp",
    ]
  }

  if (camera_framework_edm_enable) {
    sources +=
        [ "../../../../services/edm/src/query_policy/disable_camera_query.cpp" ]
  }

  if (audio_framework_edm_enable) {
    sources += [
      "../../../../services/edm/src/query_policy/disable_hdc_query.cpp",
      "../../../../services/edm/src/query_policy/disable_microphone_query.cpp",
      "../../../../services/edm/src/query_policy/disable_printer_query.cpp",
    ]
  }

  if (drivers_interface_usb_edm_enable && usb_manager_edm_enable) {
    sources += [
      "../../../../services/edm/src/query_policy/allowed_usb_devices_query.cpp",
      "../../../../services/edm/src/query_policy/disable_usb_query.cpp",
    ]
  }

  if (pasteboard_edm_enable) {
    sources += [
      "../../../../services/edm/src/query_policy/clipboard_policy_query.cpp",
    ]
  }

  if (common_event_service_edm_enable) {
    defines += [ "COMMON_EVENT_SERVICE_EDM_ENABLE" ]
    sources += [ "../../../../services/edm/src/query_policy/set_browser_policies_query.cpp" ]
  }

  external_deps = [
    "ability_base:want",
    "ability_runtime:app_manager",
    "ability_runtime:extension_manager",
    "access_token:libaccesstoken_sdk",
    "access_token:libtokenid_sdk",
    "bundle_framework:appexecfwk_base",
    "cJSON:cjson",
    "c_utils:utils",
    "common_event_service:cesfwk_innerkits",
    "file_api:securitylabel",
    "graphic_2d:librender_service_client",
    "hilog:libhilog",
    "init:libbegetutil",
    "ipc:ipc_core",
    "jsoncpp:jsoncpp",
    "pasteboard:pasteboard_client",
    "relational_store:native_rdb",
    "safwk:system_ability_fwk",
    "samgr:samgr_proxy",
    "window_manager:libwm",
    "window_manager:sms",
  ]

  if (os_account_edm_enable) {
    external_deps += [
      "os_account:libaccountkits",
      "os_account:os_account_innerkits",
    ]

    sources += [
      "../../../../services/edm/src/query_policy/disable_maintenance_mode_query.cpp",
      "../../../../services/edm/src/query_policy/disable_mtp_client_query.cpp",
      "../../../../services/edm/src/query_policy/disable_mtp_server_query.cpp",
      "../../../../services/edm/src/query_policy/disable_remote_desk_query.cpp",
      "../../../../services/edm/src/query_policy/disable_remote_diagnosis_query.cpp",
      "../../../../services/edm/src/query_policy/disable_user_mtp_client_query.cpp",
      "../../../../services/edm/src/query_policy/disallow_add_local_account_query.cpp",
      "../../../../services/edm/src/watermark/watermark_application_observer.cpp",
      "../../../../services/edm/src/watermark/watermark_observer_manager.cpp",
    ]
  }

  if (drivers_interface_usb_edm_enable && usb_manager_edm_enable) {
    external_deps += [ "usb_manager:usbsrv_client" ]
  }

  deps = [
    "../../../../common/external:edm_external_adapters",
    "../../../../common/native:edm_commom",
    "../../../../interfaces/inner_api:edmservice_kits",
    "../../../../interfaces/inner_api/plugin_kits:plugin_kits",
    "../../../../services/idl:enterprise_device_mgr_idl_stub",
  ]

  sanitize = {
    boundary_sanitize = true
    cfi = true
    cfi_cross_dso = true
    debug = false
    integer_overflow = true
    ubsan = true
  }
  branch_protector_ret = "pac_ret"
  subsystem_name = "customization"
  part_name = "enterprise_device_management"
}

ohos_unittest("EdmServicesUnitTest") {
  module_out_path = module_output_path

  include_dirs = [
    "./include",
    "./include/mock",
    "../../common/mock/include",
    "../../external_mock/include",
    "../../../../interfaces/inner_api/plugin_kits/include/utils",
  ]

  sources = [
    "./src/admin_manager_test.cpp",
    "./src/admin_test.cpp",
    "./src/device_policies_storage_rdb_test.cpp",
    "./src/enhance_execute_strategy_test.cpp",
    "./src/enterprise_account_connection_test.cpp",
    "./src/enterprise_admin_connection_test.cpp",
    "./src/enterprise_bundle_connection_test.cpp",
    "./src/enterprise_conn_manager_test.cpp",
    "./src/enterprise_device_mgr_ability_test.cpp",
    "./src/enterprise_update_connection_test.cpp",
    "./src/installed_bundle_info_list_query_test.cpp",
    "./src/iplugin_template_test.cpp",
    "./src/permission_checker_test.cpp",
    "./src/permission_manager_test.cpp",
    "./src/plugin_manager_test.cpp",
    "./src/plugin_policy_query_test.cpp",
    "./src/policy_manager_test.cpp",
    "./src/replace_execute_strategy_test.cpp",
    "./src/single_execute_strategy_test.cpp",
    "./src/user_policy_manager_test.cpp",
  ]

  defines = []
  if (common_event_service_edm_enable) {
    defines += [ "COMMON_EVENT_SERVICE_EDM_ENABLE" ]
  }

  if (!enterprise_device_management_feature_pc_only) {
    defines += [ "BACKUP_AND_RESTORE_EDM_ENABLE" ]
  }

  configs = [
    ":module_private_config",
    "../../../../common/config:coverage_flags",
  ]

  deps = [
    ":edmservice_static",
    "../../../../common/external:edm_external_adapters",
    "../../../../common/native:edm_commom",
    "../../../../interfaces/inner_api:edmservice_kits",
    "../../../../interfaces/inner_api/plugin_kits:plugin_kits",
    "../../utils:edm_unittest_utils",
  ]

  external_deps = [
    "ability_base:want",
    "ability_runtime:ability_manager",
    "access_token:libaccesstoken_sdk",
    "access_token:libnativetoken",
    "access_token:libnativetoken_shared",
    "access_token:libtoken_setproc",
    "bundle_framework:appexecfwk_core",
    "cJSON:cjson",
    "c_utils:utils",
    "common_event_service:cesfwk_innerkits",
    "file_api:securitylabel",
    "googletest:gmock_main",
    "hilog:libhilog",
    "ipc:ipc_core",
    "jsoncpp:jsoncpp",
    "safwk:system_ability_fwk",
    "samgr:samgr_proxy",
    "window_manager:sms",
  ]

  if (os_account_edm_enable) {
    external_deps += [
      "os_account:libaccountkits",
      "os_account:os_account_innerkits",
    ]
    defines += [ "OS_ACCOUNT_EDM_ENABLE" ]
  }

  sanitize = {
    boundary_sanitize = true
    cfi = true
    cfi_cross_dso = true
    debug = false
    integer_overflow = true
    ubsan = true
    blocklist = "../../cfi_blocklist.txt"
  }
  branch_protector_ret = "pac_ret"
  subsystem_name = "customization"
  part_name = "enterprise_device_management"
}

group("unittest") {
  testonly = true

  deps = [
    # deps file
    ":EdmServicesUnitTest",
  ]
}
